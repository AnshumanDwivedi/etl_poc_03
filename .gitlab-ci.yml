image: maven:3.6-jdk-8

stages:
  - build
  - test
  - deploy

variables:
  MAVEN_CLI_OPTS: "--batch-mode"
  SPARK_VER: "2.4.4"
  SPARK_COMPAT_VER: "2.4"
  SCALA_VER: "2.12.10"
  SCALA_COMPAT_VER: "2.12"
  SCALA_VER_2: "2.11.12"
  SCALA_COMPAT_VER_2: "2.11"

cache:
  paths:
    - target/

build:
  stage: build
  script:
    - mvn clean $MAVEN_CLI_OPTS compile

test:
  stage: test
  dependencies:
    - build
  script:
    - export JAVA_TOOL_OPTIONS="-Xmx1024m -Xms1024m"  # solve jvm heap size problem
    - mvn $MAVEN_CLI_OPTS test

deploy:snapshot:
  stage: deploy
  script:
    - mvn -DskipTests -Pprovided $MAVEN_CLI_OPTS deploy
  dependencies:
    - test
  only:
    - master

deploy:snapshot-compat:
  stage: deploy
  script:
    - mvn -DskipTests -Pprovided $MAVEN_CLI_OPTS -Dscala.version=$SCALA_VER_2 -Dscala.compat.version=$SCALA_COMPAT_VER_2 deploy
  dependencies:
    - test
  only:
    - master

deploy:release:manual:
  stage: deploy
  script:
    - mvn -Dchangelist= -DskipTests -Pprovided $MAVEN_CLI_OPTS deploy
  dependencies:
    - test
  only:
    - master
  when: manual

deploy:release-compat:manual:
  stage: deploy
  script:
    - mvn -Dchangelist= -DskipTests -Pprovided $MAVEN_CLI_OPTS -Dscala.version=$SCALA_VER_2 -Dscala.compat.version=$SCALA_COMPAT_VER_2 deploy
  dependencies:
    - test
  only:
    - master
  when: manual

deploy:release:auto:
  stage: deploy
  script:
    - mvn -Dchangelist= -DskipTests -Pprovided $MAVEN_CLI_OPTS deploy
  dependencies:
    - test
  only:
    - /^v.*$/
  except:
    - branches

deploy:release-compat:auto:
  stage: deploy
  script:
    - mvn -Dchangelist= -DskipTests -Pprovided $MAVEN_CLI_OPTS -Dscala.version=$SCALA_VER_2 -Dscala.compat.version=$SCALA_COMPAT_VER_2 deploy
  dependencies:
    - test
  only:
    - /^v.*$/
  except:
    - branches
